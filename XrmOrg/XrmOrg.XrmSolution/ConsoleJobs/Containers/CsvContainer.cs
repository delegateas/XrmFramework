using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;

namespace DG.XrmOrg.XrmSolution.ConsoleJobs.Containers
{
    internal class CsvContainer<T> where T : struct
    {
        public T Attributes { get; set; }

        public CsvContainer(T attributes)
        {
            Attributes = attributes;
        }

        /// <summary>
        /// Gets a CSV header corresponding to the field names in Attributes, using the separator specified in App.config
        /// </summary>
        /// <returns></returns>
        public static string GetCsvHeader()
        {
            return string.Join(ConfigurationManager.AppSettings["CsvSeparator"], typeof(T).GetFields().Select(field => field.Name));
        }
        /// <summary>
        /// Gets a CSV string corresponding to the field values in Attributes, using the separator specified in App.config
        /// </summary>
        /// <returns></returns>
        public string ToCsvString()
        {
            return string.Join(ConfigurationManager.AppSettings["CsvSeparator"], typeof(T).GetFields().Select(field => field.GetValue(Attributes)));
        }

        /// <summary>
        /// Parses a CsvContainer from a CSV string, expects the CSV string to correspond to the Attributes struct
        /// </summary>
        /// <param name="csvString">The string to parse</param>
        /// <param name="fromAdvancedFind">Whether the CSV string was generated by D365 Advanced Find - skips the first 3 columns if true</param>
        /// <returns>A CsvContainer parsed from the string</returns>
        public static T FromCsvString(string csvString, bool fromAdvancedFind = false)
        {
            var attributeStrings = csvString.Split(ConfigurationManager.AppSettings["CsvSeparator"].First());
            object attributesBoxed = new T();
            for (int i = fromAdvancedFind ? 3 : 0; i < attributeStrings.Length; i++)
            {
                var attribute = attributeStrings[i];
                try
                {
                    var field = attributesBoxed.GetType().GetFields()[fromAdvancedFind ? i - 3 : i];
                    var val = TypeDescriptor.GetConverter(typeof(T).GetFields()[fromAdvancedFind ? i - 3 : i].FieldType).ConvertFromString(attribute);
                    field.SetValue(attributesBoxed, val);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Encountered error parsing CSV string: " + ex.ToString());
                    throw;
                }
            }
            T attributes = (T)attributesBoxed;
            return attributes;
        }

        /// <summary>
        /// Reads a list of Attributes , expects the format to correspond to the Attributes struct
        /// </summary>
        /// <param name="csvFilePath">The path to the CSV file</param>
        /// <param name="fromAdvancedFind">Whether the CSV string was generated by D365 Advanced Find - skips the first 3 columns if true</param>
        /// <param name="hasHeader">Whether the file contains a header</param>
        /// <returns>A list of CsvContainers, each corresponding to a row in the file</returns>
        public static List<T> ReadFromCsv(string csvFilePath, bool fromAdvancedFind = false, bool hasHeader = true)
        {
            string res = "";
            StreamReader perfReader = new StreamReader(csvFilePath, Encoding.UTF8);
            try
            {
                res = perfReader.ReadToEnd();
            }
            finally
            {
                perfReader.Close();
            }
            var resList = res.Split(new string[] { Environment.NewLine }, StringSplitOptions.None).ToList();
            resList.RemoveAll(x => string.IsNullOrWhiteSpace(x));

            if (hasHeader)
            {
                resList.RemoveAt(0);
            }

            var returnList = new List<T>();
            foreach (var containerString in resList)
            {
                returnList.Add(FromCsvString(containerString, fromAdvancedFind));
            }
            return returnList;
        }
    }
}